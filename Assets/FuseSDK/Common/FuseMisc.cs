/*
 *  Copyright (C) 2017 Upsight, Inc. All rights reserved.
 */

using System;
using System.Collections;
using System.Collections.Generic;
using Debug = UnityEngine.Debug;

namespace FuseMisc
{
	public static class Constants
	{
		/// <summary>Use with <c>false.ToString()</c> value to disable pre rewarded ad alert.</summary>
		public static readonly string RewardedAdOptionKey_ShowPreRoll = "FuseRewardedAdOptionKey_ShowPreRoll";

		/// <summary>Use with <c>false.ToString()</c> value to disable post rewarded ad alert.</summary>
		public static readonly string RewardedAdOptionKey_ShowPostRoll = "FuseRewardedAdOptionKey_ShowPostRoll";

		/// <summary>Use to specify the pre rewarded ad alert accept text.</summary>
		public static readonly string RewardedOptionKey_PreRollYesButtonText = "FuseRewardedOptionKey_PreRollYesButtonText";

		/// <summary>Use to specify the pre rewarded ad alert decline text.</summary>
		public static readonly string RewardedOptionKey_PreRollNoButtonText = "FuseRewardedOptionKey_PreRollNoButtonText";

		/// <summary>Use to specify the post rewarded ad alert confirmation button text.</summary>
		public static readonly string RewardedOptionKey_PostRollContinueButtonText = "FuseRewardedOptionKey_PostRollContinueButtonText";
	}

	/// <summary>Representation of another player that is contained in the user's friend list.</summary>
	public struct Friend
	{
		/// <summary>A unique id generated by the Fuse system.</summary>
		public string FuseId;

		/// <summary>Id that the user used to log in.</summary>
		public string AccountId;

		/// <summary>Alias that the user used to log in.</summary>
		public string Alias;
		public bool Pending;

		public override string ToString()
		{
			JSONObject jo = new JSONObject(JSONObject.Type.OBJECT);
			JSONObject members = new JSONObject(JSONObject.Type.OBJECT);
			members.AddField("FuseId", FuseId);
			members.AddField("AccountId", AccountId);
			members.AddField("Alias", Alias);
			members.AddField("Pending", Pending);
			jo.AddField("Friend", members);
			return jo.ToString();
		}
	}

	/// <summary>Representation of an item that the user is able to purchase from the App Store. IOS ONLY.</summary>
	public struct Product
	{
		/// <summary>The ID of the product used by the App Store.</summary>
		public string ProductId;

		/// <summary>The price of the product.</summary>
		public float Price;

		/// <summary>The currency that the price is in.</summary>
		public string PriceLocale;

		public override string ToString()
		{
			JSONObject jo = new JSONObject(JSONObject.Type.OBJECT);
			JSONObject members = new JSONObject(JSONObject.Type.OBJECT);
			members.AddField("ProductId", ProductId);
			members.AddField("Price", Price);
			members.AddField("PriceLocale", PriceLocale);
			jo.AddField("Product", members);
			return jo.ToString();
		}
	}

	/// <summary>Representation of the reward that a player will recieve for watching a rewarded video.</summary>
	public struct RewardedInfo
	{
		/// <summary>The message displayed before a video is shown, typicaly asking if the user would like to watch a video.</summary>
		public string PreRollMessage;

		/// <summary>The message displayed after a video is shown, typicaly confirming the reward the user got.</summary>
		public string RewardMessage;

		/// <summary>The item the user will get as a reward.</summary>
		public string RewardItem;
 
		/// <summary>The ID of the item the user will get as a reward.</summary>
		public string RewardItemId;

		/// <summary>The amount the user will get as a reward, used when the item is a currency.</summary>
		public int RewardAmount;

		public override string ToString()
		{
			JSONObject jo = new JSONObject(JSONObject.Type.OBJECT);
			JSONObject members = new JSONObject(JSONObject.Type.OBJECT);
			members.AddField("PreRollMessage", PreRollMessage);
			members.AddField("RewardMessage", RewardMessage);
			members.AddField("RewardItem", RewardItem);
			members.AddField("RewardItemId", RewardItemId);
			members.AddField("RewardAmount", RewardAmount);
			jo.AddField("RewardedInfo", members);
			return jo.ToString();
		}

		public RewardedInfo(string infoString) : this()
		{
			if(string.IsNullOrEmpty(infoString))
				return;

			try
			{
				var pars = infoString.Split(',');
				int ra;

				PreRollMessage = System.Text.Encoding.UTF8.GetString(Convert.FromBase64String(pars[0]));
				RewardMessage = System.Text.Encoding.UTF8.GetString(Convert.FromBase64String(pars[1]));
				RewardItem = System.Text.Encoding.UTF8.GetString(Convert.FromBase64String(pars[2]));
				RewardAmount = int.TryParse(pars[3], out ra) ? ra : 0;
                RewardItemId = System.Text.Encoding.UTF8.GetString(Convert.FromBase64String(pars[4]));
			}
			catch(Exception e)
			{
				Debug.LogError("FuseSDK: Error parsing RewardInfo. Returning default value.");
				Debug.LogException(e);
			}
		}
	}

	/// <summary>Representation of an In-App Purchase Offer that can be presented to a player.</summary>
	public struct IAPOfferInfo
	{
		/// <summary>The id of the product the user will be asked to purchase.</summary>
		public string ProductId;

		/// <summary>The real currency price of the IAP.</summary>
		public float ProductPrice;

		/// <summary>The item the user will get from the IAP.</summary>
		public string ItemName;

		/// <summary>The amount the user will get from the IAP, used when the item is a currency.</summary>
		public int ItemAmount;

		/// <summary>The time and date when the offer should start.</summary>
		public DateTime StartTime;

		/// <summary>The time and date when the offer should end.</summary>
		public DateTime EndTime;

		/// <summary>The metadata configured for this offer.</summary>
		public string Metadata;

		public override string ToString()
		{
			JSONObject jo = new JSONObject(JSONObject.Type.OBJECT);
			JSONObject members = new JSONObject(JSONObject.Type.OBJECT);
			members.AddField("ProductId", ProductId);
			members.AddField("ProductPrice", ProductPrice);
			members.AddField("ItemName", ItemName);
			members.AddField("ItemAmount", ItemAmount);
			members.AddField("StartTime", StartTime.ToUnixTimestamp());
			members.AddField("EndTime", EndTime.ToUnixTimestamp());
			members.AddField("Metadata", Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(Metadata)));
			jo.AddField("IAPOfferInfo", members);
			return jo.ToString();
		}

		public IAPOfferInfo(string infoString) : this()
		{
			if(string.IsNullOrEmpty(infoString))
				return;

			try
			{
				var pars = infoString.Split(',');
				float pp;
				int ia;
				long st, et;

				ProductId = System.Text.Encoding.UTF8.GetString(Convert.FromBase64String(pars[0]));
				ProductPrice = float.TryParse(pars[1], out pp) ? pp : 0f;
				ItemName = System.Text.Encoding.UTF8.GetString(Convert.FromBase64String(pars[2]));
				ItemAmount = int.TryParse(pars[3], out ia) ? ia : 0;
				StartTime = (long.TryParse(pars[4], out st) ? st : 0).ToDateTime();
				EndTime = (long.TryParse(pars[5], out et) ? et : 0).ToDateTime();
				Metadata = System.Text.Encoding.UTF8.GetString(Convert.FromBase64String(pars[6]));
			}
			catch(Exception e)
			{
				Debug.LogError("FuseSDK: Error parsing IAPOfferInfo. Returning default value.");
				Debug.LogException(e);
				return;
			}
		}
	}

	/// <summary>Representation of a Virtual Good Offer that can be presented to a player.</summary>
	public struct VGOfferInfo
	{
		/// <summary>The id of the currency that will be spent to get the item.</summary>
		public int CurrencyID;

		/// <summary>The currency that will be spent to get the item.</summary>
		public string PurchaseCurrency;

		/// <summary>The amount of currency that will be spent to get the item.</summary>
		public float PurchasePrice;

		/// <summary>The id of the item the user will receive from the offer.</summary>
		public int VirtualGoodID;

		/// <summary>The item the user will receive from the offer.</summary>
		public string ItemName;

		/// <summary>The amount the user will get from the offer, used when the item is a currency.</summary>
		public int ItemAmount;

		/// <summary>The time and date when the offer should start.</summary>
		public DateTime StartTime;

		/// <summary>The time and date when the offer should end.</summary>
		public DateTime EndTime;

		/// <summary>The metadata configured for this offer.</summary>
		public string Metadata;

		public override string ToString()
		{
			JSONObject jo = new JSONObject(JSONObject.Type.OBJECT);
			JSONObject members = new JSONObject(JSONObject.Type.OBJECT);
			members.AddField("CurrencyID", CurrencyID);
			members.AddField("PurchaseCurrency", PurchaseCurrency);
			members.AddField("PurchasePrice", PurchasePrice);
			members.AddField("VirtualGoodID", VirtualGoodID);
			members.AddField("ItemName", ItemName);
			members.AddField("ItemAmount", ItemAmount);
			members.AddField("StartTime", StartTime.ToUnixTimestamp());
			members.AddField("EndTime", EndTime.ToUnixTimestamp());
			members.AddField("Metadata", Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(Metadata)));
			jo.AddField("VGOfferInfo", members);
			return jo.ToString();
		}

		public VGOfferInfo(string infoString) : this()
		{
			if(string.IsNullOrEmpty(infoString))
				return;

			try
			{
				var pars = infoString.Split(',');
				float pp;
				int ia;
				long st, et;
				int cid, vgid;

				PurchaseCurrency = System.Text.Encoding.UTF8.GetString(Convert.FromBase64String(pars[0]));
				PurchasePrice = float.TryParse(pars[1], out pp) ? pp : 0f;
				ItemName = System.Text.Encoding.UTF8.GetString(Convert.FromBase64String(pars[2]));
				ItemAmount = int.TryParse(pars[3], out ia) ? ia : 0;
				StartTime = (long.TryParse(pars[4], out st) ? st : 0).ToDateTime();
				EndTime = (long.TryParse(pars[5], out et) ? et : 0).ToDateTime();
				CurrencyID = int.TryParse(pars[6], out cid) ? cid : 0;
				VirtualGoodID = int.TryParse(pars[7], out vgid) ? vgid : 0;
				Metadata = System.Text.Encoding.UTF8.GetString(Convert.FromBase64String(pars[8]));
			}
			catch(Exception e)
			{
				Debug.LogError("FuseSDK: Error parsing VGOfferInfo. Returning default value.");
				Debug.LogException(e);
				return;
			}
		}
	}

	/// <summary>Error codes returned by the Fuse SDK.</summary>
	public enum FuseError
	{
		/// No error has occurred.
		NONE = 0,

		/// The user is not connected to the internet.
		NOT_CONNECTED,

		/// There was an error in establishing a connection with the server.
		REQUEST_FAILED,

		/// Data was received, but there was a problem parsing the xml
		SERVER_ERROR,

		/// The server has indicated the data it received was not valid.
		BAD_DATA,

		/// The session has recieved an error and the operation did not complete due to this error.
		SESSION_FAILURE,

		/// The request was not valid, and no action will be performed.
		INVALID_REQUEST,

		/// Unknown error
		UNDEFINED,
	}

	/// <summary>The type of transaction being recorded.</summary>
	public enum IAPState
	{
#if UNITY_IOS
		PURCHASING, PURCHASED, FAILED, RESTORED,	// IOS Specific
#elif UNITY_ANDROID
		PURCHASED, CANCELED, REFUNDED,				// Android Specific
#endif
	}

	/// <summary>The user's gender.</summary>
	public enum Gender
	{
		UNKNOWN,
		MALE,
		FEMALE,
		UNDECIDED,
		WITHHELD,
	}

	/// <summary>Type of account the player signed in with.</summary>
	public enum AccountType
	{
		NONE = 0,
		GAMECENTER = 1,
		FACEBOOK = 2,
		TWITTER = 3,
		OPENFEINT = 4,
		USER = 5,
		EMAIL = 6,
		DEVICE_ID = 7,
		GOOGLE_PLAY = 8,
	}

	/// <summary>Helpful extension functions.</summary>
	public static class FuseExtensions
	{
		public static long ToUnixTimestamp(this DateTime dateTime)
		{
			return (long)(dateTime - unixEpoch).TotalSeconds;
		}

		public static DateTime ToDateTime(this long timestamp)
		{
			return unixEpoch.AddSeconds(timestamp);
		}

		private static readonly DateTime unixEpoch = new DateTime(1970, 1, 1, 0, 0, 0, DateTimeKind.Utc);
	}

#region Doxygen

	/*! \mainpage 
	 * \ref FuseSDK
	 * 
	 * \ref FuseMisc
	 */
#endregion
}